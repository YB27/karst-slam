//----------------------------------------------------------------------------
// Config file for the mergingScanPICP application
//
//----------------------------------------------------------------------------

[General]
useSimulatedKarst = true // Deprecated parameter as this config file is used only with simulated karst
dataFolder = /home/breux/surfaceMeasureData // In the simulation case, it is the folder where are saved/loaded the simulated data.
#dataFolder = /home/yohan/gironaScans/7 
loopClosure = false // If false, consider the first two successives scan. Otherwise, consider the first loop closure (required an appropriate karst model !)
loadSurfaceData = true // If true, load the estimated surface for display 
displayOnlyCurrentScan = true // If true, only display the data related to the current scan
stopAtEachRendering = true // If true, stop the program at each step
displayUniformArcs = false // If true, also display uniform arc (ie horizontal sonar data for which elevation angle estimation failed or was too uncertain)
displayNormalUncertainty = false // If true, also display cone of uncertainty for the normal 
displayNormalDebugPoints = false // If true, also display the four points used to compute each normal
interpolationType = 0 // 0 = Linear, 1 = Spline


[Simulation]
nAngleStep = 200 // Number of sonar rotation rotation (step) to have a 360Â° scan
nStepToRun = 800 // Number of step to run 
nScanToRun = 2 // Number of full scan to run (hence a full scan here is considered as nStepToRun / nScanToRun) 
nScanDataBetweenOdoData = 20 // Number of beam sonar data received between each odometry data

#envModel=/home/yohan/pid-workspace/packages/karst_slam/share/resources/Model_blender/karstModel_forGP_1_big.obj  
#envModelWire=/home/yohan/pid-workspace/packages/karst_slam/share/resources/Model_blender/karstModel_forGP_1_big_wire.obj
#envModel=/home/breux/pid-workspace/packages/karst_slam/share/resources/Model_blender/karst_test_girona_more_noise.obj  
#envModelWire=/home/breux/pid-workspace/packages/karst_slam/share/resources/Model_blender/karst_test_girona_more_noise_wire.obj
envModel=/home/breux/pid-workspace/packages/karst_slam/share/resources/Model_blender/karstModel_loop.obj  // The blender model
envModelWire=/home/breux/pid-workspace/packages/karst_slam/share/resources/Model_blender/karstModel_loop_wire.obj // The wireframe blender model 
#envModel=/home/breux/pid-workspace/packages/karst_slam/share/resources/Model_blender/karstModel_loop_depth.obj  
#envModelWire=/home/breux/pid-workspace/packages/karst_slam/share/resources/Model_blender/karstModel_loop_depth_wire.obj

trajectoryType = 3 // 0 = linear x, 1 = custom file, 2 = loop center, 3 = loop circle (only if loopClosure is true)
noisyTraj = true // If true, add some noise to the generated trajectory
randomSeed = 5 // Seed for the RNG.
varianceTrajNoise_xyz = 5e-4 // Variance of the added noise for trajectory (for x,y,z)
varianceTrajNoise_euler = 5e-6 // Variance of the added noise for trajectory (for yaw,pitch,roll)
trajectoryFile = /home/breux/gironaScans/7/odometry.txt  // Used with trajectoryType = 5 (custom file)
odometryAbsoluteFile = /home/breux/gironaScans/7/odometryAbsolute.txt // Used only with useDepthPitchRollAbsoluteValues
useDepthPitchRollAbsoluteValues = true // If true, use the absolute z, pitch and roll values and not incrementally (to simulate data given by the IMU)
variance_depth = 0.000277778 // Used only if useDepthPitchRollAbsoluteValues=true. 3-sigma = 5 cm
variance_imu_angles = 0.027777778 // Used only if useDepthPitchRollAbsoluteValues=true. 3-sigma = 0.5 degree , in Degree

[SonarVertical]
sphericalLocalCovariance_r = 0.1 // Local variance of range in the sonar local frame
sphericalLocalCovariance_yaw = 0.1 // Local variance of yaw in the sonar local frame in degree
sphericalLocalCovariance_pitch = 1 // Local variance of pitch in the sonar local frame in degree
maxRange = 50 #10 // Maximum range of the sonar. 
beamWidth = 1 // Sonar beam width (vertical) in degree
ignoreBeamWidth = true // If true, totally ignore the beam width (beam considered as a line)
beamSamplingMethod = 0 // 0: One random sample, 1: nBeamRaySamples equally spaced samples, 2: only one sample at beam center (theta = 0)
nBeamRaySamples = 1 // Number of sample in a beam (used only if beamSamplingMethod=1)
nThetaSamples = 30 // Number of theta sampled for each measured range (used for elevation angle estimation)
#sensorPoseOnRobot = [0.55 0 -0.15 180 90 0]  // angles in degree
sensorPoseOnRobot = [0 0 0 0 90 0] // Pose of the robot expressed in the robot frame (angles in degree)
sensorPoseOnRobot_covDiag = [0 0 0 0 0 0] // Diagonal of the covariance matrix of the sensor pose in robot frame
filterRanges = true // If true, filter the measured ranges
filterRanges_minDelta = 0.5 // Minimum distance between two measured ranges (used if filterRanges is true)
quantification = 0.2 // Range quantification (to simulate real measurement from sonar)

[SonarHorizontal]
sphericalLocalCovariance_r = 0.025 // Local variance of range in the sonar local frame
sphericalLocalCovariance_yaw = 0.1 // Local variance of yaw in the sonar local frame in degree
sphericalLocalCovariance_pitch = 1 // Local variance of pitch in the sonar local frame in degree
maxRange = 10 #20 // Maximum range of the sonar.
beamWidth = 35 // // Sonar beam width (vertical) in degree
ignoreBeamWidth = false // If true, totally ignore the beam width (beam considered as a line)
beamSamplingMethod = 1 // 0: One random sample, 1: nBeamRaySamples equally spaced samples, 2: only one sample at beam center (theta = 0)
nBeamRaySamples = 6 // Number of sample in a beam (used only if beamSamplingMethod=1)
nThetaSamples = 200 // Number of theta sampled for each measured range (used for elevation angle estimation)
#sensorPoseOnRobot = [0.1 0 -0.42 180 0 0] #[0 0 0 0 0 0] // angles in degree
sensorPoseOnRobot = [0 0 0 0 0 0] // Pose of the robot expressed in the robot frame (angles in degree)
sensorPoseOnRobot_covDiag = [0 0 0 0 0 0] // Diagonal of the covariance matrix of the sensor pose in robot frame
filterRanges = true // If true, filter the measured ranges
filterRanges_minDelta = 0.1 // Minimum distance between two measured ranges (used if filterRanges is true)
quantification = 0.05 // Range quantification (to simulate real measurement from sonar)

[GaussianProcess]
# Path to the main script for surface estimation with Gaussian Process
pythonScript = /home/breux/pid-workspace/packages/karst_slam/share/resources/sonarPICP/sonar_GP.py 
kernel_s = matern52 // Kernel K_s (Currently available kernel : exponential, matern32, matern52, rbf)
kernel_yaw = matern52Chordal // Kernel K_yaw (Currently available kernel : exponentialChordal, matern52Chordal, C2WendlandChordal, C2WendlandGeo) (the last two are not working well)
# ToDo : In GPy, didn't find how to fix only some dimension of lengthscale ... So always fix/unconstrain both dimensions
learnMeanFunction = true // If false, use an elliptic cylinder 
rangeMapFunction = None // Use a mapping function : None, sqrt, ln (goal is to avoid negative estimated range values)
# See paper for the definition of kernel parameters
kernel_variance = 0.64 #0.1 # -1 // -1 to not fix it
lengthscale_s   = 1 # 1 // -1 to not fix it
lengthscale_yaw = 0.25 # 0.5 # 0.5 //-1 to not fix it
kernel_process_variance = -1 #-1// -1 to not fix it
########################
batch_size = 100000 # 100000 // Batch size for Gaussian process prediction  

[Keystrokes]
keystroke_toggle_mean_GPSurface = m
keystroke_toggle_lowerBound_GPSurface = l
keystroke_toggle_upperBound_GPSurface = u
keystroke_toggle_verticalSonarPoints = v
keystroke_toggle_trajectoryPoses = t
keystroke_toggle_cylinder = p
keystroke_toggle_pca_cylinder = f
keystroke_toggle_normals = n
keystroke_toggle_grid = g
keystroke_switchArcsModes = a
keystroke_toggleText = o
keystroke_increase_model_alpha = a
keystroke_decrease_model_alpha = q
keystroke_wireframe = w
keystroke_model = r
keystroke_exit = x
