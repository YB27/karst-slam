//----------------------------------------------------------------------------
// Config file for the using the graphslam-engine application
//
//              ~ The MRPT Library ~
//----------------------------------------------------------------------------

[GeneralConfiguration]
enableVisuals = true
rawlogFile = /home/yohan/Downloads/full_dataset/dummyDataset.rawlog
nrd_class = MSIS_NRD3D // ICPCriteriaNRD3D
erd_class = MSIS_pICPCriteriaERD3D // ICPCriteriaERD3D
gso_class = GaussNewtonGSO3D

output_dir_fname = graphslam_TUM_results
user_decides_about_output_dir = false
save_3DScene = true
save_3DScene_fname = output_scene.3DScene
save_graph = true
save_graph_fname = output_graph.graph

; Set the verbosity of the output messages. Only messages over the specified
; will be printed to the console.
; Available options in ascending order are as follows:
; LVL_DEBUG => 0,
; LVL_INFO  => 1,
; LVL_WARN  => 2,
; LVL_ERROR => 3
class_verbosity = 0

# Sensor are written as follow TYPE:SensorLabel
sensors_list = [MSIS_primary:Sonar_Micron MSIS_secondary:Sonar_Seaking]

#######################################################
[NodeRegistrationDeciderParameters]

# Sensor to be used by the MSIS_NRD module
MSISNRD_sensorLabel = Sonar_Micron

# For ICP-based or Fixed distance NRD
registration_max_distance = 0.1
;registration_max_distance = 1 // meters
registration_max_angle = 10 // degrees
use_distance_node_reg = true
use_angle_difference_node_reg = true
class_verbosity = 0

# OdometryNRD -> register node when variance of accumulated odometry excess a threshold
maxVarThresh_x = 0.3 // meter
maxVarthresh_y = 0.3
maxVarThresh_z = 0.3
maxVarThresh_yaw = 0.1 // radian (? check it)
maxVarThresh_roll = 0.1
maxVarThresh_pitch = 0.1

# MSIS_NRD3D
MSIS_nrd_device_name = tritech_micron # Define the MSIS used for localization (when several are used)

########################################################
[EdgeRegistrationDeciderParameters]

use_scan_matching = true // strongly suggested that this is set to TRUE
;ICP_goodness_thresh = 0.70 // threshold for accepting the ICP constraint in the graph
ICP_max_distance = 1
ICP_goodness_thresh = 0.60 // threshold for accepting the ICP constraint in the graph
prev_nodes_for_ICP = 10
;prev_nodes_for_ICP = 5
LC_eigenvalues_ratio_thresh = 2
LC_min_remote_nodes = 3 // how many out "remote" nodes should exist in a partition for the partition to be examined for potential loop closures
LC_check_curr_partition_only = true

class_verbosity = 0

// Graph Partitioning Parameters
forceBisectionOnly = false
gridResolution = 0.10
;gridResolution = 0.50
;gridResolution = 5
;gridResolution = 50
minDistForCorrespondence = 0.20
minimumNumberElementsEachCluster = 1
minMahaDistForCorrespondence = 2.0
partitionThreshold = 0.7
;partitionThreshold = 1.0
useMapMatching = true

// Loop Closing Parameters
pICP_max_distance = 1.
pICP_assocRatio_thresh = 0.4

[OptimizerParameters]

optimization_on_second_thread = false // Modified from false
optimization_distance = 1.5
; min node difference for an edge to be considered as a loop closure
; Used in both the visualization procedure for updating the Loop closures
; counter as well as the optimization procedure since it affects how often we
; otpimize the full graph
LC_min_nodeid_diff= 20
#optimization_distance = -1 // optimize whole graph every time.

// NonLinearOptimizers parameters
maxIterations = 100
relativeErrorTol = 1e-5
absoluteErrorTol = 1e-5
errorTol = 0.0
verbosity = 5
orderingType = 0 // COLAMD
linearSolverType = 1 //  0 : MULTIFRONTAL_CHOLESKY , 1 : MULTIFRONTAL_QR

// Lev-MarquardtOptimizer parameters (GTSAM)
lambdaInitial = 1e-5
lambdaFactor = 10.0
lambdaUpperBound = 1e5
lambdaLowerBound = 0.0
minModelFidelity = 1e-3
diagonalDamping = false
useFixedLambdaFactor = true
minDiagonal = 1e-6
maxDiagonal = 1e32
verbosityLM = 0 // SILENT

// DoglegOptimizer parameters
deltaInitial = 1.0
verbosityDL = 0 // SILENT

// ISAM parameter
ISAM_reorderInterval = 3

// ISAM2 parameters
relinearizeSkip = 1
relinearizeThreshold = 0.01
enableRelinearization = true 
evaluateNonlinearError = false
factorization = 0 // CHOLESKY
cacheLinearizedFactors = true
enableDetailedResults = false
enablePartialRelinearizationCheck = false
findUnusedFactorSlots = false

isGaussNewton = true // Added param. if false dogleg. Used to know which parameter class to load

// ISAM2GaussNewton parameters
wildfireThreshold_GN = 0.001 

// ISAM2Dogleg parameters
initialDelta = 1.0
wildfireThreshold_DL = 1e-5
adaptationMode = 0 // SEARCH_EACH_ITERATION
verbose = false

// Levenberg-Marquardt parameters
#verbose = false
profiler = false
max_iterations = 100
scale_hessian = 0.2
tau = 1e-3

class_verbosity = 0

########################################################
# seems that it doesn't read hex, using cfg_file.read_int
# hardcode the integer values instead
# http://www.binaryhexconverter.com/hex-to-decimal-converter
[VisualizationParameters]

visualize_optimized_graph = 1

optimized_show_ID_labels = 0
optimized_show_ground_grid = 1
optimized_show_edges = 0 // Modified from 1
optimized_edge_color = 4278257152
optimized_edge_width = 0.5
optimized_show_node_corners = 1
optimized_show_edge_rel_poses = 0
optimized_edge_rel_poses_color = 1090486271
optimized_nodes_edges_corner_scale = 0.0
optimized_nodes_corner_scale = 0.01
optimized_nodes_point_size = 0.1
optimized_nodes_point_color = 1090486271

visualize_map = true
visualize_laser_scans = true
visualize_odometry_poses = true
visualize_ground_truth = true
visualize_estimated_trajectory = true
visualize_SLAM_metric = true        // extra displayPlots showing the evolution of the SLAM metric
visualize_map_partitions = true
enable_curr_pos_viewport = true

# Added
otshow_edges=false

[ICP]
minAbsStep_trans           = 1e-6  // If the correction in all translation coordinates (X,Y,Z) is below this threshold (in meters), iterations are terminated:
minAbsStep_rot             = 1e-6  // If the correction in all rotation coordinates (yaw,pitch,roll) is below this threshold (in radians), iterations are terminated:

thresholdDist              = 0.3   // Initial maximum distance for matching a pair of points
thresholdAng_DEG           = 5     // An angular factor (in degrees) to increase the matching distance for distant points.

ALFA                       = 0.8   // After convergence, the thresholds are multiplied by this constant and ICP keep running (provides finer matching)

smallestThresholdDist      = 0.05 // This is the smallest the distance threshold can become after stopping ICP and accepting the result.
onlyClosestCorrespondences = true // 1: Use the closest points only, 0: Use all the correspondences within the threshold (more robust sometimes, but slower)
doRANSAC                   = false

# 0: icpClassic
# 1: icpLevenbergMarquardt
ICP_algorithm              = 0 // icpLevenbergMarquardt not available for 3D
ICP_covariance_method      = 0 // Default : 1 (icpCovFiniteDifferences). 0 = icpCovLinearIMSE

# decimation to apply to the point cloud being registered against the map
# Reduce to "1" to obtain the best accuracy
corresponding_points_decimation =  5

# Currently, there is no implementation of covariance computation in the 3d case
# ToDo : implement it myself
isComputeICPCovariance = false

# For test, use fixed covariance
cov_x = 0.05;
cov_y = 0.05;
cov_z = 0.05;
cov_yaw = 0.035; // Angles in rad
cov_roll = 0.035;
cov_pitch = 0.035;

pICP_max_distance = 1.
pICP_assocRatio_thresh = 0.6 
pICP_association_useKDTree = true
pICP_confidenceLevel  = 0.95
pICP_errorConvergenceThresh = 0.01
pICP_LM_maxIterations    = 100
pICP_maxIterations = 5
pICP_numericalJacobians = false
pICP_associationMetric = 0 # 0: mahalanobis, 1 : bhattacharyya
pICP_associationMethod  = 0 # 0 : mrpt::slam::assocNN
pICP_bhatta_thresh     = 0.5
pICP_n_kdClosest      = 6
pICP_LM_tau = 0.01
pICP_LM_e1 = 1e-8
pICP_LM_e2 = 0.
pICP_usePseudoExp = false
pICP_LM_numericalJacobians = false

[OCTOMAP]
occupancyThres = 0.5
probHit  = 0.7
probMiss = 0.4
clampingThresMin = 0.4 // 0.1192
clampingThresMax = 0.97 // 0.97 
pruning = false // !!!! Warning : The name is misleading. Effectively prune if false ...

[MSIS]
Sonar_Micron_sensorPose = [0 0 1 90 0 0]
Sonar_Micron_sensorPoseCovDiag = [0 0 0 0 0 0]
Sonar_Micron_horizontalBeamWidth = 3// deg
Sonar_Micron_verticalBeamWidth = 35// deg
Sonar_Micron_intensityThreshold = 80
Sonar_Micron_maxRange = 20 // meters. !! Note: indicated at 50m in the paper but in the log we find maxRange=20 .... !!
Sonar_Micron_minRange = 0.2
Sonar_Micron_minDistanceFilter = 3
Sonar_Micron_nAngleStep = 100
Sonar_Micron_nIntensityBins = 400
#Sonar_Micron_rangeStd = // has default value( proportional to intensityStep = nbins/maxrange), in meters
#Sonar_Micron_angleStd = // has default value( proportional to anglestep = 360/nAngleStep) , in rad

Sonar_Seaking_sensorPose = [0 0 0 0 90 0]
Sonar_Seaking_sensorPoseCovDiag = [0 0 0 0 0 0]
Sonar_Seaking_horizontalBeamWidth = 1// deg
Sonar_Seaking_verticalBeamWidth = 1// deg
Sonar_Seaking_intensityThreshold = 80
Sonar_Seaking_maxRange = 10 // meters. !! Note: indicated at 20m in the paper but in the log we find maxRange=10 .... !!
Sonar_Seaking_minRange = 0
Sonar_Seaking_minDistanceFilter = 3
Sonar_Seaking_nAngleStep = 100
Sonar_Seaking_nIntensityBins = 50
#Sonar_SeaKing_rangeStd = // has default value( proportional to intensityStep = nbins/maxrange), in meters
#Sonar_SeaKing_angleStd = // has default value( proportional to anglestep = 360/nAngleStep) , in rad


[Display]
# Window dimensions and pose #
window_width = 800
window_height = 600
window_x_pose = 400
window_y_pose = 200

# Octomap display #
Octomap_enableLights = true
Octomap_showGridLines = false
Octomap_gridLinesWidth = 1.
Octomap_showFreeVoxels = false
Octomap_showVoxelsAsPoints = false

# Odometry only poses display #
OdometryOnly_pointSize = 1.
OdometryOnly_pointColor_r = 0
OdometryOnly_pointColor_g = 0
OdometryOnly_pointColor_b = 255

# GT poses display #
GT_pointSize = 1.
GT_pointColor_r = 0 
GT_pointColor_g = 255
GT_pointColor_b = 0

# Estimated Trajectory display #
EstimatedTraj_lineWidth = 1.5
EstimatedTraj_color_r = 127
EstimatedTraj_color_g = 0
EstimatedTraj_color_b = 127

# Robot model display #

# MSIS (scan) display
MSISScan_Sonar_Micron_pointSize = 1
MSISScan_Sonar_Micron_oldScansPointSize = 1
MSISScan_Sonar_Micron_pointColor_r = 0
MSISScan_Sonar_Micron_pointColor_g = 167
MSISScan_Sonar_Micron_pointColor_b = 255
MSISScan_Sonar_Micron_lastScan_pointColor_r = 255
MSISScan_Sonar_Micron_lastScan_pointColor_g = 0
MSISScan_Sonar_Micron_lastScan_pointColor_b = 0
MSISScan_Sonar_Micron_curScan_pointColor_r = 0
MSISScan_Sonar_Micron_curScan_pointColor_g = 255
MSISScan_Sonar_Micron_curScan_pointColor_b = 0
MSISScan_Sonar_Micron_refFrameAxis = true

MSISScan_Sonar_Seaking_pointSize = 1
MSISScan_Sonar_Seaking_oldScansPointSize = 1
MSISScan_Sonar_Seaking_pointColor_r = 0
MSISScan_Sonar_Seaking_pointColor_g = 0
MSISScan_Sonar_Seaking_pointColor_b = 0
MSISScan_Sonar_Seaking_lastScan_pointColor_r = 255
MSISScan_Sonar_Seaking_lastScan_pointColor_g = 0
MSISScan_Sonar_Seaking_lastScan_pointColor_b = 255
MSISScan_Sonar_Seaking_curScan_pointColor_r = 220
MSISScan_Sonar_Seaking_curScan_pointColor_g = 255
MSISScan_Sonar_Seaking_curScan_pointColor_b = 0
MSISScan_Sonar_Seaking_refFrameAxis = false

[Keystrokes]
# Keystrokes  #
keystroke_pause = p
keystroke_toggle_odometryOnly_traj = o
keystroke_toggle_GT_traj = g
keystroke_toggle_estimated_traj = t
keystroke_toggle_map = m
keystroke_toggle_grid = g
keystroke_exit = Ctrl+c
keystroke_resume = r // Only when replaying log file step by step

keystroke_MSIS_Sonar_Micron_toggle_scans      = s
keystroke_MSIS_Sonar_Micron_toggle_ellipsoids = e
keystroke_MSIS_Sonar_Seaking_toggle_scans      = b
keystroke_MSIS_Sonar_Seaking_toggle_ellipsoids = n

